// GameServer 와 GameClient 간의 패킷 데이터.
// <시간>	 	세계시간 / 현재 웨이브 정보 / 낮과 밤.
// <오브젝트>	 	맵에 존재하는 상호가능한 오브젝트에 대한 관리 데이터.
// <플레이어>		Position / Velocity / Collision 등의 플레이어의 이동 및 상태에 영향을 주는 데이터를 주고받는다.
// <몬스터>		플레이어와 마찬가지로 현재 몬스터의 이동경로 및 상태에 영향을 주는 데이터를 주고받음.

// 데이터 형에 대한 정의
// 8 bit: byte (int8), ubyte (uint8), bool
// 16 bit: short (int16), ushort (uint16)
// 32 bit: int (int32), uint (uint32), float (float32)
// 64 bit: long (int64), ulong (uint64), double (float64)

namespace Eater.GameData;

// 사용될 구조체들에 대한 정의

// 3D 상의 Vector
struct Vec3
{
	x:float;
	y:float;
	z:float;
}

// 현재 낮인지 밤인지?
enum DayStatus:byte
{
	Day = 0,
	Night
}

// 현재 몇 스테이지인지?
enum StageStatus:byte
{
	Stage01 = 0,
	Stage02,
	Stage03,
	Stage04
}

// 상호가능한가?
enum InteractStatus:byte
{
	Interact = 0,
	Used
}

// 드론 상태
enum DroneStatus:byte
{
	Moving = 0,
	Fighting,
	Dead
}

// 몬스터 상태
enum MonsterStatus:byte
{
	Moving = 0,
	Fighting,
	Dead
}

// 실제 게임 데이터에 대한 정의


table Player
{
	name:string;
	pos:Vec3;
	mov_vector:Vec3;
	hp:uint;
	mana:uint;
	drone_mode:DroneStatus;
}

table Monster
{
	name:string;
	pos:Vec3;
	mov_vector:Vec3;
	mp:uint;
	mana:uint;
	monster_ai:MonsterStatus;
}

table WorldTimer
{
	current_time:double;
	current_daystate:DayStatus;
	current_stage:StageStatus;
}

// 자원 관련 오브젝트.
table ResourceObject
{
	respawn_time:float;
	name:string;
	interactstate:InteractStatus;
}

table WorldObject
{
	resourceobject_list:[ResourceObject];
}