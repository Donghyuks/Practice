// Player 패킷 데이터.

// 데이터 형에 대한 정의
// 8 bit: byte (int8), ubyte (uint8), bool
// 16 bit: short (int16), ushort (uint16)
// 32 bit: int (int32), uint (uint32), float (float32)
// 64 bit: long (int64), ulong (uint64), double (float64)

namespace Eater.GameData;

// 사용될 구조체들에 대한 정의

// 3D 상의 Vector
struct Vec3
{
	x:float;
	y:float;
	z:float;
}

// 실제 게임 데이터에 대한 정의

table StartInfo
{
	users:[ClientStat];		// 게임을 진행하는 클라이언트의 정보들
}

table ClientStat
{
	playerindex:ushort;		// 플레이어 번호
	world_speed:double;		// 게임 내 속도
	character_type:ushort;	// 캐릭터 종류
	world_position:Vec3;	// 시작 위치
}

table ClientMove
{
	sequence:uint;		// 시퀀스 번호
	forward:bool;		// 앞쪽 방향
	back:bool;			// 뒤쪽 방향
	right:bool;			// 오른쪽 방향
	left:bool;			// 왼쪽 방향
	dash:bool;			// 대쉬
	skill1:bool;		// 스킬 1번
	skill2:bool;		// 스킬 2번
}

table WorldData
{
	users:[UserData];		// UserData 벡터
	enemies:[EnemyData];	// EnemyData 벡터
	objects:[ObjectData];	// ObjectData 벡터
}

table UserData
{
	playerindex:ushort;		// 플레이어 번호
	animation:ushort;		// 현재 플레이어 Animation 상태
	position:Vec3;			// 현재 플레이어의 위치
	sequence:ushort;		// 시퀀스 번호
}

table EnemyData
{
	index:ushort;			// 적 번호
	animation:ushort;		// 애니메이션 상태
	position:Vec3;			// 위치
	mov_vector:Vec3;		// 방향 벡터
}

table ObjectData
{
	index:ushort;			// 오브젝트 번호
	type:ushort;			// 타입
	position:Vec3;			// 위치
}