// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORLDDATA_EATER_WORLDDATA_H_
#define FLATBUFFERS_GENERATED_WORLDDATA_EATER_WORLDDATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Eater {
namespace WorldData {

struct WorldTimer;
struct WorldTimerBuilder;

struct ResourceObject;
struct ResourceObjectBuilder;

struct WorldObject;
struct WorldObjectBuilder;

enum DayStatus : int8_t {
  DayStatus_Day = 0,
  DayStatus_Night = 1,
  DayStatus_MIN = DayStatus_Day,
  DayStatus_MAX = DayStatus_Night
};

inline const DayStatus (&EnumValuesDayStatus())[2] {
  static const DayStatus values[] = {
    DayStatus_Day,
    DayStatus_Night
  };
  return values;
}

inline const char * const *EnumNamesDayStatus() {
  static const char * const names[3] = {
    "Day",
    "Night",
    nullptr
  };
  return names;
}

inline const char *EnumNameDayStatus(DayStatus e) {
  if (flatbuffers::IsOutRange(e, DayStatus_Day, DayStatus_Night)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDayStatus()[index];
}

enum StageStatus : int8_t {
  StageStatus_Stage01 = 0,
  StageStatus_Stage02 = 1,
  StageStatus_Stage03 = 2,
  StageStatus_Stage04 = 3,
  StageStatus_MIN = StageStatus_Stage01,
  StageStatus_MAX = StageStatus_Stage04
};

inline const StageStatus (&EnumValuesStageStatus())[4] {
  static const StageStatus values[] = {
    StageStatus_Stage01,
    StageStatus_Stage02,
    StageStatus_Stage03,
    StageStatus_Stage04
  };
  return values;
}

inline const char * const *EnumNamesStageStatus() {
  static const char * const names[5] = {
    "Stage01",
    "Stage02",
    "Stage03",
    "Stage04",
    nullptr
  };
  return names;
}

inline const char *EnumNameStageStatus(StageStatus e) {
  if (flatbuffers::IsOutRange(e, StageStatus_Stage01, StageStatus_Stage04)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStageStatus()[index];
}

enum InteractStatus : int8_t {
  InteractStatus_Interact = 0,
  InteractStatus_Used = 1,
  InteractStatus_MIN = InteractStatus_Interact,
  InteractStatus_MAX = InteractStatus_Used
};

inline const InteractStatus (&EnumValuesInteractStatus())[2] {
  static const InteractStatus values[] = {
    InteractStatus_Interact,
    InteractStatus_Used
  };
  return values;
}

inline const char * const *EnumNamesInteractStatus() {
  static const char * const names[3] = {
    "Interact",
    "Used",
    nullptr
  };
  return names;
}

inline const char *EnumNameInteractStatus(InteractStatus e) {
  if (flatbuffers::IsOutRange(e, InteractStatus_Interact, InteractStatus_Used)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInteractStatus()[index];
}

struct WorldTimer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WorldTimerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CURRENT_TIME = 4,
    VT_CURRENT_DAYSTATE = 6,
    VT_CURRENT_STAGE = 8
  };
  double current_time() const {
    return GetField<double>(VT_CURRENT_TIME, 0.0);
  }
  Eater::WorldData::DayStatus current_daystate() const {
    return static_cast<Eater::WorldData::DayStatus>(GetField<int8_t>(VT_CURRENT_DAYSTATE, 0));
  }
  Eater::WorldData::StageStatus current_stage() const {
    return static_cast<Eater::WorldData::StageStatus>(GetField<int8_t>(VT_CURRENT_STAGE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_CURRENT_TIME) &&
           VerifyField<int8_t>(verifier, VT_CURRENT_DAYSTATE) &&
           VerifyField<int8_t>(verifier, VT_CURRENT_STAGE) &&
           verifier.EndTable();
  }
};

struct WorldTimerBuilder {
  typedef WorldTimer Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_current_time(double current_time) {
    fbb_.AddElement<double>(WorldTimer::VT_CURRENT_TIME, current_time, 0.0);
  }
  void add_current_daystate(Eater::WorldData::DayStatus current_daystate) {
    fbb_.AddElement<int8_t>(WorldTimer::VT_CURRENT_DAYSTATE, static_cast<int8_t>(current_daystate), 0);
  }
  void add_current_stage(Eater::WorldData::StageStatus current_stage) {
    fbb_.AddElement<int8_t>(WorldTimer::VT_CURRENT_STAGE, static_cast<int8_t>(current_stage), 0);
  }
  explicit WorldTimerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WorldTimer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WorldTimer>(end);
    return o;
  }
};

inline flatbuffers::Offset<WorldTimer> CreateWorldTimer(
    flatbuffers::FlatBufferBuilder &_fbb,
    double current_time = 0.0,
    Eater::WorldData::DayStatus current_daystate = Eater::WorldData::DayStatus_Day,
    Eater::WorldData::StageStatus current_stage = Eater::WorldData::StageStatus_Stage01) {
  WorldTimerBuilder builder_(_fbb);
  builder_.add_current_time(current_time);
  builder_.add_current_stage(current_stage);
  builder_.add_current_daystate(current_daystate);
  return builder_.Finish();
}

struct ResourceObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ResourceObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPAWN_TIME = 4,
    VT_NAME = 6,
    VT_INTERACTSTATE = 8
  };
  float respawn_time() const {
    return GetField<float>(VT_RESPAWN_TIME, 0.0f);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  Eater::WorldData::InteractStatus interactstate() const {
    return static_cast<Eater::WorldData::InteractStatus>(GetField<int8_t>(VT_INTERACTSTATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_RESPAWN_TIME) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_INTERACTSTATE) &&
           verifier.EndTable();
  }
};

struct ResourceObjectBuilder {
  typedef ResourceObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_respawn_time(float respawn_time) {
    fbb_.AddElement<float>(ResourceObject::VT_RESPAWN_TIME, respawn_time, 0.0f);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ResourceObject::VT_NAME, name);
  }
  void add_interactstate(Eater::WorldData::InteractStatus interactstate) {
    fbb_.AddElement<int8_t>(ResourceObject::VT_INTERACTSTATE, static_cast<int8_t>(interactstate), 0);
  }
  explicit ResourceObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ResourceObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResourceObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResourceObject> CreateResourceObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    float respawn_time = 0.0f,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    Eater::WorldData::InteractStatus interactstate = Eater::WorldData::InteractStatus_Interact) {
  ResourceObjectBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_respawn_time(respawn_time);
  builder_.add_interactstate(interactstate);
  return builder_.Finish();
}

inline flatbuffers::Offset<ResourceObject> CreateResourceObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    float respawn_time = 0.0f,
    const char *name = nullptr,
    Eater::WorldData::InteractStatus interactstate = Eater::WorldData::InteractStatus_Interact) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Eater::WorldData::CreateResourceObject(
      _fbb,
      respawn_time,
      name__,
      interactstate);
}

struct WorldObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WorldObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESOURCEOBJECT_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Eater::WorldData::ResourceObject>> *resourceobject_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Eater::WorldData::ResourceObject>> *>(VT_RESOURCEOBJECT_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RESOURCEOBJECT_LIST) &&
           verifier.VerifyVector(resourceobject_list()) &&
           verifier.VerifyVectorOfTables(resourceobject_list()) &&
           verifier.EndTable();
  }
};

struct WorldObjectBuilder {
  typedef WorldObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_resourceobject_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Eater::WorldData::ResourceObject>>> resourceobject_list) {
    fbb_.AddOffset(WorldObject::VT_RESOURCEOBJECT_LIST, resourceobject_list);
  }
  explicit WorldObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WorldObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WorldObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<WorldObject> CreateWorldObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Eater::WorldData::ResourceObject>>> resourceobject_list = 0) {
  WorldObjectBuilder builder_(_fbb);
  builder_.add_resourceobject_list(resourceobject_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldObject> CreateWorldObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Eater::WorldData::ResourceObject>> *resourceobject_list = nullptr) {
  auto resourceobject_list__ = resourceobject_list ? _fbb.CreateVector<flatbuffers::Offset<Eater::WorldData::ResourceObject>>(*resourceobject_list) : 0;
  return Eater::WorldData::CreateWorldObject(
      _fbb,
      resourceobject_list__);
}

}  // namespace WorldData
}  // namespace Eater

#endif  // FLATBUFFERS_GENERATED_WORLDDATA_EATER_WORLDDATA_H_
