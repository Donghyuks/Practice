// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSGDATA_EATER_MSGDATA_H_
#define FLATBUFFERS_GENERATED_MSGDATA_EATER_MSGDATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Eater {
namespace MsgData {

struct UserMessage;
struct UserMessageBuilder;

enum EmotionStatus : int8_t {
  EmotionStatus_None = 0,
  EmotionStatus_Hello = 1,
  EmotionStatus_Smile = 2,
  EmotionStatus_Angry = 3,
  EmotionStatus_MIN = EmotionStatus_None,
  EmotionStatus_MAX = EmotionStatus_Angry
};

inline const EmotionStatus (&EnumValuesEmotionStatus())[4] {
  static const EmotionStatus values[] = {
    EmotionStatus_None,
    EmotionStatus_Hello,
    EmotionStatus_Smile,
    EmotionStatus_Angry
  };
  return values;
}

inline const char * const *EnumNamesEmotionStatus() {
  static const char * const names[5] = {
    "None",
    "Hello",
    "Smile",
    "Angry",
    nullptr
  };
  return names;
}

inline const char *EnumNameEmotionStatus(EmotionStatus e) {
  if (flatbuffers::IsOutRange(e, EmotionStatus_None, EmotionStatus_Angry)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEmotionStatus()[index];
}

enum MssageType : int8_t {
  MssageType_All = 0,
  MssageType_Whisper = 1,
  MssageType_MIN = MssageType_All,
  MssageType_MAX = MssageType_Whisper
};

inline const MssageType (&EnumValuesMssageType())[2] {
  static const MssageType values[] = {
    MssageType_All,
    MssageType_Whisper
  };
  return values;
}

inline const char * const *EnumNamesMssageType() {
  static const char * const names[3] = {
    "All",
    "Whisper",
    nullptr
  };
  return names;
}

inline const char *EnumNameMssageType(MssageType e) {
  if (flatbuffers::IsOutRange(e, MssageType_All, MssageType_Whisper)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMssageType()[index];
}

struct UserMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_TYPE = 4,
    VT_MSG_DATA = 6,
    VT_EMOTICON = 8
  };
  Eater::MsgData::MssageType msg_type() const {
    return static_cast<Eater::MsgData::MssageType>(GetField<int8_t>(VT_MSG_TYPE, 0));
  }
  const flatbuffers::String *msg_data() const {
    return GetPointer<const flatbuffers::String *>(VT_MSG_DATA);
  }
  Eater::MsgData::EmotionStatus emoticon() const {
    return static_cast<Eater::MsgData::EmotionStatus>(GetField<int8_t>(VT_EMOTICON, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG_DATA) &&
           verifier.VerifyString(msg_data()) &&
           VerifyField<int8_t>(verifier, VT_EMOTICON) &&
           verifier.EndTable();
  }
};

struct UserMessageBuilder {
  typedef UserMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_type(Eater::MsgData::MssageType msg_type) {
    fbb_.AddElement<int8_t>(UserMessage::VT_MSG_TYPE, static_cast<int8_t>(msg_type), 0);
  }
  void add_msg_data(flatbuffers::Offset<flatbuffers::String> msg_data) {
    fbb_.AddOffset(UserMessage::VT_MSG_DATA, msg_data);
  }
  void add_emoticon(Eater::MsgData::EmotionStatus emoticon) {
    fbb_.AddElement<int8_t>(UserMessage::VT_EMOTICON, static_cast<int8_t>(emoticon), 0);
  }
  explicit UserMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserMessage> CreateUserMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    Eater::MsgData::MssageType msg_type = Eater::MsgData::MssageType_All,
    flatbuffers::Offset<flatbuffers::String> msg_data = 0,
    Eater::MsgData::EmotionStatus emoticon = Eater::MsgData::EmotionStatus_None) {
  UserMessageBuilder builder_(_fbb);
  builder_.add_msg_data(msg_data);
  builder_.add_emoticon(emoticon);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserMessage> CreateUserMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    Eater::MsgData::MssageType msg_type = Eater::MsgData::MssageType_All,
    const char *msg_data = nullptr,
    Eater::MsgData::EmotionStatus emoticon = Eater::MsgData::EmotionStatus_None) {
  auto msg_data__ = msg_data ? _fbb.CreateString(msg_data) : 0;
  return Eater::MsgData::CreateUserMessage(
      _fbb,
      msg_type,
      msg_data__,
      emoticon);
}

}  // namespace MsgData
}  // namespace Eater

#endif  // FLATBUFFERS_GENERATED_MSGDATA_EATER_MSGDATA_H_
