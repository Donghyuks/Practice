// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UNITDATA_EATER_MOVEDATA_H_
#define FLATBUFFERS_GENERATED_UNITDATA_EATER_MOVEDATA_H_

#include "flatbuffers/flatbuffers.h"

namespace Eater {
namespace MoveData {

struct Vec3;

struct Player;
struct PlayerBuilder;

struct Monster;
struct MonsterBuilder;

enum DroneStatus : int8_t {
  DroneStatus_Moving = 0,
  DroneStatus_Fighting = 1,
  DroneStatus_Dead = 2,
  DroneStatus_MIN = DroneStatus_Moving,
  DroneStatus_MAX = DroneStatus_Dead
};

inline const DroneStatus (&EnumValuesDroneStatus())[3] {
  static const DroneStatus values[] = {
    DroneStatus_Moving,
    DroneStatus_Fighting,
    DroneStatus_Dead
  };
  return values;
}

inline const char * const *EnumNamesDroneStatus() {
  static const char * const names[4] = {
    "Moving",
    "Fighting",
    "Dead",
    nullptr
  };
  return names;
}

inline const char *EnumNameDroneStatus(DroneStatus e) {
  if (flatbuffers::IsOutRange(e, DroneStatus_Moving, DroneStatus_Dead)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesDroneStatus()[index];
}

enum MonsterStatus : int8_t {
  MonsterStatus_Moving = 0,
  MonsterStatus_Fighting = 1,
  MonsterStatus_Dead = 2,
  MonsterStatus_MIN = MonsterStatus_Moving,
  MonsterStatus_MAX = MonsterStatus_Dead
};

inline const MonsterStatus (&EnumValuesMonsterStatus())[3] {
  static const MonsterStatus values[] = {
    MonsterStatus_Moving,
    MonsterStatus_Fighting,
    MonsterStatus_Dead
  };
  return values;
}

inline const char * const *EnumNamesMonsterStatus() {
  static const char * const names[4] = {
    "Moving",
    "Fighting",
    "Dead",
    nullptr
  };
  return names;
}

inline const char *EnumNameMonsterStatus(MonsterStatus e) {
  if (flatbuffers::IsOutRange(e, MonsterStatus_Moving, MonsterStatus_Dead)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMonsterStatus()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Player FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_POS = 6,
    VT_MOV_VECTOR = 8,
    VT_HP = 10,
    VT_MANA = 12,
    VT_DRONE_MODE = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Eater::MoveData::Vec3 *pos() const {
    return GetStruct<const Eater::MoveData::Vec3 *>(VT_POS);
  }
  const Eater::MoveData::Vec3 *mov_vector() const {
    return GetStruct<const Eater::MoveData::Vec3 *>(VT_MOV_VECTOR);
  }
  uint32_t hp() const {
    return GetField<uint32_t>(VT_HP, 0);
  }
  uint32_t mana() const {
    return GetField<uint32_t>(VT_MANA, 0);
  }
  Eater::MoveData::DroneStatus drone_mode() const {
    return static_cast<Eater::MoveData::DroneStatus>(GetField<int8_t>(VT_DRONE_MODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<Eater::MoveData::Vec3>(verifier, VT_POS) &&
           VerifyField<Eater::MoveData::Vec3>(verifier, VT_MOV_VECTOR) &&
           VerifyField<uint32_t>(verifier, VT_HP) &&
           VerifyField<uint32_t>(verifier, VT_MANA) &&
           VerifyField<int8_t>(verifier, VT_DRONE_MODE) &&
           verifier.EndTable();
  }
};

struct PlayerBuilder {
  typedef Player Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Player::VT_NAME, name);
  }
  void add_pos(const Eater::MoveData::Vec3 *pos) {
    fbb_.AddStruct(Player::VT_POS, pos);
  }
  void add_mov_vector(const Eater::MoveData::Vec3 *mov_vector) {
    fbb_.AddStruct(Player::VT_MOV_VECTOR, mov_vector);
  }
  void add_hp(uint32_t hp) {
    fbb_.AddElement<uint32_t>(Player::VT_HP, hp, 0);
  }
  void add_mana(uint32_t mana) {
    fbb_.AddElement<uint32_t>(Player::VT_MANA, mana, 0);
  }
  void add_drone_mode(Eater::MoveData::DroneStatus drone_mode) {
    fbb_.AddElement<int8_t>(Player::VT_DRONE_MODE, static_cast<int8_t>(drone_mode), 0);
  }
  explicit PlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline flatbuffers::Offset<Player> CreatePlayer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const Eater::MoveData::Vec3 *pos = 0,
    const Eater::MoveData::Vec3 *mov_vector = 0,
    uint32_t hp = 0,
    uint32_t mana = 0,
    Eater::MoveData::DroneStatus drone_mode = Eater::MoveData::DroneStatus_Moving) {
  PlayerBuilder builder_(_fbb);
  builder_.add_mana(mana);
  builder_.add_hp(hp);
  builder_.add_mov_vector(mov_vector);
  builder_.add_pos(pos);
  builder_.add_name(name);
  builder_.add_drone_mode(drone_mode);
  return builder_.Finish();
}

inline flatbuffers::Offset<Player> CreatePlayerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Eater::MoveData::Vec3 *pos = 0,
    const Eater::MoveData::Vec3 *mov_vector = 0,
    uint32_t hp = 0,
    uint32_t mana = 0,
    Eater::MoveData::DroneStatus drone_mode = Eater::MoveData::DroneStatus_Moving) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Eater::MoveData::CreatePlayer(
      _fbb,
      name__,
      pos,
      mov_vector,
      hp,
      mana,
      drone_mode);
}

struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MonsterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_POS = 6,
    VT_MOV_VECTOR = 8,
    VT_MP = 10,
    VT_MANA = 12,
    VT_MONSTER_AI = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Eater::MoveData::Vec3 *pos() const {
    return GetStruct<const Eater::MoveData::Vec3 *>(VT_POS);
  }
  const Eater::MoveData::Vec3 *mov_vector() const {
    return GetStruct<const Eater::MoveData::Vec3 *>(VT_MOV_VECTOR);
  }
  uint32_t mp() const {
    return GetField<uint32_t>(VT_MP, 0);
  }
  uint32_t mana() const {
    return GetField<uint32_t>(VT_MANA, 0);
  }
  Eater::MoveData::MonsterStatus monster_ai() const {
    return static_cast<Eater::MoveData::MonsterStatus>(GetField<int8_t>(VT_MONSTER_AI, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<Eater::MoveData::Vec3>(verifier, VT_POS) &&
           VerifyField<Eater::MoveData::Vec3>(verifier, VT_MOV_VECTOR) &&
           VerifyField<uint32_t>(verifier, VT_MP) &&
           VerifyField<uint32_t>(verifier, VT_MANA) &&
           VerifyField<int8_t>(verifier, VT_MONSTER_AI) &&
           verifier.EndTable();
  }
};

struct MonsterBuilder {
  typedef Monster Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  void add_pos(const Eater::MoveData::Vec3 *pos) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  void add_mov_vector(const Eater::MoveData::Vec3 *mov_vector) {
    fbb_.AddStruct(Monster::VT_MOV_VECTOR, mov_vector);
  }
  void add_mp(uint32_t mp) {
    fbb_.AddElement<uint32_t>(Monster::VT_MP, mp, 0);
  }
  void add_mana(uint32_t mana) {
    fbb_.AddElement<uint32_t>(Monster::VT_MANA, mana, 0);
  }
  void add_monster_ai(Eater::MoveData::MonsterStatus monster_ai) {
    fbb_.AddElement<int8_t>(Monster::VT_MONSTER_AI, static_cast<int8_t>(monster_ai), 0);
  }
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const Eater::MoveData::Vec3 *pos = 0,
    const Eater::MoveData::Vec3 *mov_vector = 0,
    uint32_t mp = 0,
    uint32_t mana = 0,
    Eater::MoveData::MonsterStatus monster_ai = Eater::MoveData::MonsterStatus_Moving) {
  MonsterBuilder builder_(_fbb);
  builder_.add_mana(mana);
  builder_.add_mp(mp);
  builder_.add_mov_vector(mov_vector);
  builder_.add_pos(pos);
  builder_.add_name(name);
  builder_.add_monster_ai(monster_ai);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster> CreateMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Eater::MoveData::Vec3 *pos = 0,
    const Eater::MoveData::Vec3 *mov_vector = 0,
    uint32_t mp = 0,
    uint32_t mana = 0,
    Eater::MoveData::MonsterStatus monster_ai = Eater::MoveData::MonsterStatus_Moving) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Eater::MoveData::CreateMonster(
      _fbb,
      name__,
      pos,
      mov_vector,
      mp,
      mana,
      monster_ai);
}

}  // namespace MoveData
}  // namespace Eater

#endif  // FLATBUFFERS_GENERATED_UNITDATA_EATER_MOVEDATA_H_
